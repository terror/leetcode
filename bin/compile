#!/usr/bin/env python3

import json
import os
import requests
import textwrap
from dataclasses import dataclass
from functools import cached_property
from typing import List

DIFF = {1: 'Easy', 2: 'Medium', 3: 'Hard'}
EXT = {'.py': 'Python'}

@dataclass
class Problem:
  id: str
  name: str
  difficulty: int
  solution: str
  link: str
  acceptance_ratio: int

  def from_json(entry):
    return Problem(
      id=entry['question__title_slug'],
      name=entry['question__title'],
      difficulty=entry['level'],
      solution=
      f'https://github.com/terror/leetcode/blob/master/src/{entry["question__title_slug"]}.py',
      link=f'https://leetcode.com/problems/{entry["question__title_slug"]}',
      acceptance_ratio=round(
        int(entry['total_acs']) / int(entry['total_submitted']), 1
      ) * 100
    )

class Client:
  def __init__(
    self, url: str = 'https://leetcode.com/api/problems/algorithms/'
  ):
    self.url = url

  @cached_property
  def problems(self) -> List[Problem]:
    return list(
      map(
        lambda entry: Problem.from_json({**entry['stat'], **entry['difficulty']}),
        requests.get(self.url).json()['stat_status_pairs']
      )
    )

  def find(self, id: str) -> Problem:
    found = list(filter(lambda problem: problem.id == id, self.problems))
    if len(found) == 0:
      return None
    return found[0]

class File:
  def __init__(self, path: str = 'README.md'):
    self.path = path
    self.buffer = open(path, 'w')

  def update(self, problems):
    self.buffer.write('### Leetcode\n\n')

    self.buffer.write(
      'Solutions to various problems on [Leetcode](https://leetcode.com/). Feel free to ping me to chat about any of the solutions in `/src`.\n\n'
    )

    table = '\n| Name | Difficulty | Solution |  Link | Acceptance |\n| --- | --- | --- | --- | --- |\n'
    for problem in problems:
      table += f'| {problem.name} | {DIFF[problem.difficulty]} | [{EXT[problem.solution[problem.solution.rfind("."):]]}]({problem.solution}) | [{problem.link}]({problem.link}) | {problem.acceptance_ratio}% |\n'
    self.buffer.write(table)

    self.buffer.close()

def main(problem_ids: List[str]):
  client, file = Client(), File()
  problems = list(map(lambda problem_id: client.find(problem_id), problem_ids))
  file.update(problems)

if __name__ == '__main__':
  try:
    main(
      list(
        map(lambda filename: filename[:filename.rfind('.')], os.listdir('src'))
      )
    )
  except Exception as error:
    print(f'error: {str(error)}')
